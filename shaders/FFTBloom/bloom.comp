#version 450

layout(binding = 0) uniform sampler2D hdrSampler;
layout(binding = 1) uniform sampler2D kernelSampler;
layout(binding = 2, rgba32f) uniform image2D outputImage;
layout(std140, binding = 3) uniform UnifromBufferObject {
    uvec2 texSize;
    float ratio;
    int R;
} ubo;

vec2 getKernelUV(ivec2 offset) {
    vec2 uv = vec2(0.5) + vec2(offset) / vec2(ubo.texSize) / ubo.ratio;
    return clamp(uv, vec2(0.0), vec2(1.0));
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main() {
    uvec2 index = gl_GlobalInvocationID.xy;
    vec2 uv = vec2(index) / vec2(ubo.texSize);
    vec4 color = vec4(0.0);
    vec4 totalWeight = vec4(0.0);

    for (int i = -ubo.R; i <= ubo.R; ++i) {
        for (int j = -ubo.R; j <= ubo.R; ++j) {
            vec2 offset = vec2(i, j) / vec2(ubo.texSize);
            vec4 sampleColor = texture(hdrSampler, clamp(uv + offset, vec2(0.0), vec2(1.0)));
            vec4 weight = texture(kernelSampler, getKernelUV(ivec2(i, j)));
            color += weight * sampleColor;
            totalWeight += weight;
        }
    }

    totalWeight += vec4(1e-4);
    color /= totalWeight;
    imageStore(outputImage, ivec2(index), color);
}